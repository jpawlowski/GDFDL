#!/bin/bash
#
# GDFDL - A Development Framework for Debian live-build
# General functions
#
# Copyright (c) 2012-2013, Julian Pawlowski <jp@jps-networks.eu>
# See LICENSE.GDFDL file for details.
#

# backup local config and restore original from Git
#
function gdfdl_config_backup () {
	cp -f ${GDFDL_DIR}/gdfdl.conf /tmp/gdfdl.conf
	[ -f ${GDFDL_DIR}/gdfdl-custom.conf ] && cp -f ${GDFDL_DIR}/gdfdl-custom.conf /tmp/gdfdl-custom.conf
	cd ${GDFDL_DIR}
	git checkout ${GDFDL_DIR}/gdfdl.conf 2>&1 >/dev/null
	[ -f ${GDFDL_DIR}/gdfdl-custom.conf ] && git checkout ${GDFDL_DIR}/gdfdl-custom.conf 2>&1 >/dev/null
	cd - >/dev/null
	return 0
}

# restore local config
#
function gdfdl_config_restore () {
	mv -f /tmp/gdfdl.conf ${GDFDL_DIR}/gdfdl.conf
	[ -f /tmp/gdfdl-custom.conf ] && mv -f /tmp/gdfdl-custom.conf ${GDFDL_DIR}/gdfdl-custom.conf
	return 0
}

# Calculate effective Debian Live version based on distribution
#
function gdfdl_set_debianlive_version () {
	if [[
		"${GDFDL_BASEDISTRIBUTION}" == "squeeze" ||
		"${GDFDL_BASEDISTRIBUTION}" == "artax"
		]]; then
		GDFDL_DEBIANLIVE_VERSION="v2"
		return 0
	elif [[
		"${GDFDL_BASEDISTRIBUTION}" == "wheezy" ||
		"${GDFDL_BASEDISTRIBUTION}" == "jessie" ||
		"${GDFDL_BASEDISTRIBUTION}" == "precise" ||
		"${GDFDL_BASEDISTRIBUTION}" == "baureo"
		 ]]; then
 		GDFDL_DEBIANLIVE_VERSION="v3"
 		return 0
	else
		echo "ERROR: Unsupported distribution. Aborting ..."
		exit 1
		return 1
	fi
}

# Calculate effective Debian Live version based on distribution
#
function gdfdl_set_debianlive_basedistribution () {
	if [[
		"${GDFDL_BASEDISTRIBUTION}" == "squeeze" ||
		"${GDFDL_BASEDISTRIBUTION}" == "wheezy" ||
		"${GDFDL_BASEDISTRIBUTION}" == "jessie"
		]]; then
		GDFDL_DEBIANLIVE_BASE="debian"
		return 0
	elif [[
		"${GDFDL_BASEDISTRIBUTION}" == "precise"
		 ]]; then
 		GDFDL_DEBIANLIVE_BASE="ubuntu"
		return 0
	elif [[
		"${GDFDL_BASEDISTRIBUTION}" == "artax" ||
		"${GDFDL_BASEDISTRIBUTION}" == "baureo"
		 ]]; then
 		GDFDL_DEBIANLIVE_BASE="progress"
		return 0
	else
		echo "ERROR: Unsupported distribution. Aborting ..."
		exit 1
		return 1
	fi
}

# check for sufficient sudo rights for non-root users and set shell commands accordingly
#
function gdfdl_check_sudo () {
	if [[ ${EUID} -ne 0 ]];
		then
		if [[ `sudo -l ${BIN_CHROOT} --version 2>&1 >/dev/null` ||
			`sudo -l ${BIN_MOUNT} -o bind /sys ${GDFDL_BASEDIR}/sys 2>&1 >/dev/null` ||
			`sudo -l ${BIN_MOUNT} -o bind /proc ${GDFDL_BASEDIR}/proc 2>&1 >/dev/null` ||
			`sudo -l ${BIN_MOUNT} -o bind /dev/pts ${GDFDL_BASEDIR}/dev/pts 2>&1 >/dev/null` ||
			`sudo -l ${BIN_UMOUNT} ${GDFDL_BASEDIR}/sys 2>&1 >/dev/null` ||
			`sudo -l ${BIN_UMOUNT} ${GDFDL_BASEDIR}/proc 2>&1 >/dev/null` ||
			`sudo -l ${BIN_UMOUNT} ${GDFDL_BASEDIR}/dev/pts 2>&1 >/dev/null` ]];
			then
			local CURRENT_USER="`whoami`"
			local GDFDL_BASEDIR_SCRIPT="`dirname "${GDFDL_BASEDIR}"`"
			echo "
Cmnd_Alias ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_CHROOT = ${BIN_CHROOT} ${GDFDL_BASEDIR_SCRIPT}/*
Cmnd_Alias ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_DEBOOTSTRAP = ${BIN_DEBOOTSTRAP}
Cmnd_Alias ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_UMOUNT = ${BIN_UMOUNT} ${GDFDL_BASEDIR_SCRIPT}/*
Cmnd_Alias ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_MOUNT =  ${BIN_MOUNT} -o bind /dev/pts ${GDFDL_BASEDIR_SCRIPT}/*, ${BIN_MOUNT} -o bind /sys ${GDFDL_BASEDIR_SCRIPT}/*, ${BIN_MOUNT} -o bind /proc ${GDFDL_BASEDIR_SCRIPT}/*
Cmnd_Alias ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_CMNDS = ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_CHROOT,${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_DEBOOTSTRAP,${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_UMOUNT,${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_MOUNT

${CURRENT_USER} ALL= NOPASSWD: ${CURRENT_USER^^}_${GDFDL_BRANDNAME^^}_CMNDS" > /tmp/sudo_${CURRENT_USER,,}_${GDFDL_BRANDNAME,,}

		 echo "
YOU ARE RUNNING THIS SCRIPT WITH NON-ROOT PRIVILEGES.

This build environment requires to run `basename ${BIN_DEBOOTSTRAP}`
and `basename ${BIN_CHROOT}` commands which implicits root privileges.
It uses Sudo to fulfill that requirement.

To update your Sudo configuration, a file '/tmp/sudo_${CURRENT_USER,,}_${GDFDL_BRANDNAME,,}'
with your individual configuration was created.
Please move this file to /etc/sudoers.d/ as followed:

 mv /tmp/sudo_${CURRENT_USER,,}_${GDFDL_BRANDNAME,,} /etc/sudoers.d/${CURRENT_USER,,}_${GDFDL_BRANDNAME,,}
 chown root.root /etc/sudoers.d/${CURRENT_USER,,}_${GDFDL_BRANDNAME,,}
 chmod 0440 /etc/sudoers.d/${CURRENT_USER,,}_${GDFDL_BRANDNAME,,}

After you have finished this you may try again.

NOTE:
If you are not allowed to access directory /etc/sudoers.d, contact your administrator.
We recommend to run this build environment on a dedicated build machine,
for instance a separate virtual machine (via VMware, KVM, OpenVZ, whatever) where you can
grant root privileges via sudo with no worries.
"
			exit 1
			return 1
		else
			BIN_CHROOT="sudo ${BIN_CHROOT}"
			BIN_MOUNT="sudo ${BIN_MOUNT}"
			BIN_UMOUNT="sudo ${BIN_UMOUNT}"
			BIN_DEBOOTSTRAP="sudo ${BIN_DEBOOTSTRAP}"
			return 0
		fi
	fi

	return 0
}

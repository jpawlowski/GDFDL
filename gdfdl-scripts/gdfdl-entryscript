#!/bin/bash
#
# GDFDL - A Development Framework for Debian live-build
# Main entry script for GDFDL
#
# Copyright (c) 2012-2013, Julian Pawlowski <jp@jps-networks.eu>
# See LICENSE.GDFDL file for details.
#

set -e

umask 022

BIN_CHROOT="/usr/sbin/chroot"
BIN_MOUNT="/bin/mount"
BIN_UMOUNT="/bin/umount"
BIN_DEBOOTSTRAP="/usr/sbin/debootstrap"

# Load functions
#
source ${GDFDL_BASEDIR}${GDFDL_SCRIPTS}/gdfdl-functions

# Do not run this script directly.
#
if [[ x${GDFDL_DIR} == x"" ]]
then
echo "ERROR: Do not run this script directly. Aborting ..."
	exit 1
fi

# Check for sudo and chroot on host system
#
if [[ ! -f "${BIN_CHROOT}" || ! -f "/usr/bin/sudo" ]];
then
	echo "Please re-install sudo and chroot first (they once where there!). Aborting ..."
	exit 1
fi

# Check for root rights and set commands
#
gdfdl_check_sudo

# Show help message
#
if [[ $1 == "--help" || $1 == "-h" || $1 == "help" ]];
then
	echo "
 ${GDFDL_BRANDNAME^^} BUILD ENVIRONMENT
 Usage: `basename "$0"` [FUNCTION]

 Normal functions:
   help                     Print this help.
   build                    Start building ISO file.
   show                     Show currently available ISO files.
   clean                    Cleanup build environment, keep ISO files.
   full-clean               Cleanup build environment including ISO files.
   update                   Update to latest version from Git.
   uninstall                Remove build environment from your disk.

 Debug and Development functions:
   chroot                   Enter build environment.
   chroot-iso               Enter ISO file chroot environment after build.
   git-commit               Commit changes into local Git repository.
   git-push                 Upload local changes into remote Git repository.

 Add 'help' as additional parameter to each function to get help
 about optional parameters for it.

 Successfully built ISO files and their logs can be found in
 ${GDFDL_BASEDIR}/iso/

${GDFDL_BRANDINFO}
"
	exit 0
fi

# Uninstall GDFDL
#
if [[ $1 == "uninstall" ]];
then
	echo -n "Removing ${GDFDL_BRANDNAME} Build Environment ... "
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/dev/pts`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/sys`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/proc`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/proc
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/dev/pts`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/sys`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/proc`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/proc

	# we trick a bit here to allow uninstall via sudo for non-root
	# users without allowing additional commands
	${BIN_CHROOT} ${GDFDL_BASEDIR} chmod 777 /
	${BIN_CHROOT} ${GDFDL_BASEDIR} chmod -R 777 ${GDFDL_DIR} /iso /run
	${BIN_CHROOT} ${GDFDL_BASEDIR} rm -rf /*
	rm -rf ${GDFDL_BASEDIR} ${0}
	echo "ok"
	exit
fi

# Show currently available ISO and related files
#
if [[ $1 == "show" ]];
then
	if [ -d ${GDFDL_BASEDIR}/iso ];
	then
		echo -e "The following ISO files are currently available in ./${GDFDL_BASEDIR}/iso/:\n"
		ls ${GDFDL_BASEDIR}/iso/ | sort
	else
		echo "No built ISO images found. Run '`basename "$0"` build' first."
	fi
	exit
fi

# Only handle known commands
#
if [[ $1 != "build" &&
	$1 != "clean" &&
	$1 != "full-clean" &&
	$1 != "update" &&
	$1 != "chroot" &&
	$1 != "chroot-iso" &&
	$1 != "git-commit" &&
	$1 != "git-push" &&
	x$1 != x ]];
then
	echo "ERROR: Unknown command option. Run '`basename "$0"` help' to see complete list of options."
	exit 1
elif [[ $# -eq 0 ]];
then
	echo "Missing command option. Run '`basename "$0"` help' to see complete list of options."
	exit 1
fi

# Run autoupdate for GDFDL
#
if [[ "${GDFDL_AUTOUPDATE}" == "true" && $1 != "update" ]];
then
	${BIN_CHROOT} ${GDFDL_BASEDIR} ${GDFDL_SCRIPTS}/update --autoupdate 2>&1 >/dev/null
fi

# jump into chroot
#

if [[ $1 == "chroot-iso" ]];
	then

	# Print chroot directory if requested
	#
	if [[ $2 == "--printdir" ]];
		then
		echo ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot
		exit 0
	fi

	# Check if chroot from build phase exists
	#
	if [[ ! -d ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot ]];
		then
		echo "No chroot filesystem for ISO found. Run '`basename "$0"` build' first."
		exit 1
	fi

	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/dev/pts`" == "x" ]] && ${BIN_MOUNT} -o bind /dev/pts ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/sys`" == "x" ]] && ${BIN_MOUNT} -o bind /sys ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/proc`" == "x" ]] && ${BIN_MOUNT} -o bind /proc ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/proc

	shift
	${BIN_CHROOT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot "${@}"

	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/dev/pts`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/sys`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/proc`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}${GDFDL_DIR}/chroot/proc

elif [[ $1 == "chroot" ]];
	then

	# Print chroot directory if requested
	#
	if [[ $2 == "--printdir" ]];
		then
		echo ${GDFDL_BASEDIR}
		exit 0
	fi

	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/dev/pts`" == "x" ]] && ${BIN_MOUNT} -o bind /dev/pts ${GDFDL_BASEDIR}/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/sys`" == "x" ]] && ${BIN_MOUNT} -o bind /sys ${GDFDL_BASEDIR}/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/proc`" == "x" ]] && ${BIN_MOUNT} -o bind /proc ${GDFDL_BASEDIR}/proc

	shift
	${BIN_CHROOT} ${GDFDL_BASEDIR} "${@}"

	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/dev/pts`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/sys`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/proc`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/proc

else
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/dev/pts`" == "x" ]] && ${BIN_MOUNT} -o bind /dev/pts ${GDFDL_BASEDIR}/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/sys`" == "x" ]] && ${BIN_MOUNT} -o bind /sys ${GDFDL_BASEDIR}/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/proc`" == "x" ]] && ${BIN_MOUNT} -o bind /proc ${GDFDL_BASEDIR}/proc

	${BIN_CHROOT} ${GDFDL_BASEDIR} ${GDFDL_SCRIPTS}/"${@}"

	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/dev/pts`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/dev/pts
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/sys`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/sys
	[[ "x`cat /proc/mounts | grep ${GDFDL_BASEDIR}/proc`" != "x" ]] && ${BIN_UMOUNT} ${GDFDL_BASEDIR}/proc
fi
